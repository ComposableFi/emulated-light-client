use core::num::{NonZeroU128, NonZeroU16};
use std::rc::Rc;
use std::str::FromStr;
use std::thread::sleep;
use std::time::Duration;

use ::ibc::core::client::types::msgs::{ClientMsg, MsgUpdateClient};
use ::ibc::core::handler::types::msgs::MsgEnvelope;
use anchor_client::anchor_lang::system_program;
use anchor_client::solana_client::rpc_client::RpcClient;
use anchor_client::solana_client::rpc_config::RpcSendTransactionConfig;
use anchor_client::solana_sdk::commitment_config::CommitmentConfig;
use anchor_client::solana_sdk::compute_budget::ComputeBudgetInstruction;
use anchor_client::solana_sdk::ed25519_instruction::SIGNATURE_OFFSETS_SERIALIZED_SIZE;
use anchor_client::solana_sdk::pubkey::Pubkey;
use anchor_client::solana_sdk::signature::{
    read_keypair_file, Keypair, Signature, Signer,
};
use anchor_client::solana_sdk::transaction::Transaction;
use anchor_client::{solana_sdk, Client, Cluster};
use anchor_lang::solana_program::system_instruction::create_account;
use anchor_spl::associated_token::get_associated_token_address;
use anyhow::Result;
use ibc::apps::transfer::types::msgs::transfer::MsgTransfer;
use sigverify::ed25519_program::{new_instruction, Entry, SignatureOffsets};
use spl_token::instruction::initialize_mint2;
use spl_token::solana_program::instruction::{AccountMeta, Instruction};

use crate::ibc::ClientStateCommon;
use crate::{
    accounts, chain, ibc, instruction, ix_data_account, CryptoHash,
    MINT_ESCROW_SEED,
};
const IBC_TRIE_PREFIX: &[u8] = b"ibc/";
pub const STAKING_PROGRAM_ID: &str =
    "8n3FHwYxFgQCQc2FNFkwDUf9mcqupxXcCvgfHbApMLv3";
pub const WRITE_ACCOUNT_SEED: &[u8] = b"write";
// const BASE_DENOM: &str = "PICA";

const TRANSFER_AMOUNT: u64 = 1000000;

fn airdrop(client: &RpcClient, account: Pubkey, lamports: u64) -> Signature {
    let balance_before = client.get_balance(&account).unwrap();
    println!("This is balance before {}", balance_before);
    let airdrop_signature = client.request_airdrop(&account, lamports).unwrap();
    sleep(Duration::from_secs(2));
    println!("This is airdrop signature {}", airdrop_signature);

    let balance_after = client.get_balance(&account).unwrap();
    println!("This is balance after {}", balance_after);
    assert_eq!(balance_before + lamports, balance_after);
    airdrop_signature
}

fn create_mock_client_and_cs_state(
) -> (ibc::mock::MockClientState, ibc::mock::MockConsensusState) {
    let mock_header = ibc::mock::MockHeader {
        height: ibc::Height::min(0),
        timestamp: ibc::Timestamp::from_nanoseconds(1).unwrap(),
    };
    let mock_client_state = ibc::mock::MockClientState::new(mock_header);
    let mock_cs_state = ibc::mock::MockConsensusState::new(mock_header);
    (mock_client_state, mock_cs_state)
}

macro_rules! make_message {
    ($msg:expr, $($variant:path),+ $(,)?) => {{
        let message = $msg;
        $( let message = $variant(message); )*
        message
    }}
}

#[test]
#[ignore = "Requires local validator to run"]
fn anchor_test_deliver() -> Result<()> {
    let authority = Rc::new(read_keypair_file("../../keypair.json").unwrap());
    println!("This is pubkey {}", authority.pubkey().to_string());
    let lamports = 2_000_000_000;

    let client = Client::new_with_options(
        Cluster::Localnet,
        authority.clone(),
        CommitmentConfig::processed(),
    );
    let program = client.program(crate::ID).unwrap();
    let write_account_program_id =
        read_keypair_file("../../../../target/deploy/write-keypair.json")
            .unwrap()
            .pubkey();
    let signature_program_id =
        read_keypair_file("../../../../target/deploy/sigverify-keypair.json")
            .unwrap()
            .pubkey();
    println!(
        "This is write account program id {:?}",
        write_account_program_id.to_string()
    );

    let sol_rpc_client = program.rpc();
    let _airdrop_signature =
        airdrop(&sol_rpc_client, authority.pubkey(), lamports);

    // Build, sign, and send program instruction
    let storage = Pubkey::find_program_address(
        &[crate::SOLANA_IBC_STORAGE_SEED],
        &crate::ID,
    )
    .0;
    let trie = Pubkey::find_program_address(&[crate::TRIE_SEED], &crate::ID).0;
    let chain =
        Pubkey::find_program_address(&[crate::CHAIN_SEED], &crate::ID).0;

    let mint_keypair =
        Rc::new(read_keypair_file("../../token_mint_keypair.json").unwrap());
    let native_token_mint_key = mint_keypair.pubkey();
    let base_denom = native_token_mint_key.to_string();
    let hashed_denom = CryptoHash::digest(base_denom.as_bytes());

    /*
     * Initialise chain
     */
    println!("\nInitialising");
    let sig = program
        .request()
        .accounts(accounts::Initialise {
            sender: authority.pubkey(),
            storage,
            trie,
            chain,
            system_program: system_program::ID,
        })
        .args(instruction::Initialise {
            config: chain::Config {
                min_validators: NonZeroU16::MIN,
                max_validators: NonZeroU16::MAX,
                min_validator_stake: NonZeroU128::new(1000).unwrap(),
                min_total_stake: NonZeroU128::new(1000).unwrap(),
                min_quorum_stake: NonZeroU128::new(1000).unwrap(),
                min_block_length: 5.into(),
                max_block_age_ns: 10 * 10_u64.pow(9),
                min_epoch_length: 200_000.into(),
            },
            staking_program_id: Pubkey::from_str(STAKING_PROGRAM_ID).unwrap(),
            genesis_epoch: chain::Epoch::new(
                vec![chain::Validator::new(
                    authority.pubkey().into(),
                    NonZeroU128::new(2000).unwrap(),
                )],
                NonZeroU128::new(1000).unwrap(),
            )
            .unwrap(),
        })
        .payer(authority.clone())
        .signer(&*authority)
        .send()?;
    // .send_with_spinner_and_config(RpcSendTransactionConfig {
    //     skip_preflight: true,
    //     ..RpcSendTransactionConfig::default()
    // })?;
    println!("  Signature: {sig}");

    let chain_account: chain::ChainData = program.account(chain).unwrap();

    let genesis_hash = chain_account.genesis().unwrap();
    println!("This is genesis hash {}", genesis_hash.to_string());

    // let test_msg = ibc::MsgCreateClient {
    //     client_state: ibc::Any {
    //         type_url: "/ibc.lightclients.tendermint.v1.ClientState".to_owned(),
    //         value: vec![
    //             10, 16, 98, 97, 110, 107, 115, 121, 45, 116, 101, 115, 116,
    //             110, 101, 116, 45, 53, 18, 4, 8, 1, 16, 3, 26, 3, 8, 128, 50,
    //             34, 4, 8, 128, 163, 5, 42, 4, 8, 224, 198, 91, 50, 0, 58, 6, 8,
    //             5, 16, 165, 170, 78, 66, 25, 10, 9, 8, 1, 24, 1, 32, 1, 42, 1,
    //             0, 18, 12, 10, 2, 0, 1, 16, 33, 24, 4, 32, 12, 48, 1, 66, 25,
    //             10, 9, 8, 1, 24, 1, 32, 1, 42, 1, 0, 18, 12, 10, 2, 0, 1, 16,
    //             32, 24, 1, 32, 1, 48, 1, 74, 7, 117, 112, 103, 114, 97, 100,
    //             101, 74, 16, 117, 112, 103, 114, 97, 100, 101, 100, 73, 66, 67,
    //             83, 116, 97, 116, 101,
    //         ],
    //     },
    //     consensus_state: ibc::Any {
    //         type_url: "/ibc.lightclients.tendermint.v1.ConsensusState"
    //             .to_owned(),
    //         value: vec![
    //             10, 12, 8, 244, 209, 188, 176, 6, 16, 143, 175, 232, 132, 1,
    //             18, 34, 10, 32, 196, 204, 69, 163, 131, 219, 80, 72, 57, 125,
    //             236, 53, 234, 85, 101, 1, 33, 86, 142, 171, 85, 58, 72, 88, 44,
    //             61, 69, 186, 153, 128, 74, 177, 26, 32, 242, 84, 247, 17, 69,
    //             95, 217, 194, 224, 202, 181, 25, 214, 203, 28, 110, 179, 138,
    //             12, 217, 52, 188, 8, 131, 199, 195, 2, 194, 47, 140, 234, 188,
    //         ],
    //     },
    //     signer: String::from("oxyzEsUj9CV6HsqPCUZqVwrFJJvpd9iCBrPdzTBWLBb")
    //         .into(),
    // };

    // // let serialized_message = test_msg.clone().encode_vec();
    // let message = MsgEnvelope::Client(ClientMsg::CreateClient(test_msg));

    // /*
    //  * Create New Mock Client
    //  */
    // println!("\nCreating Mock Client");
    // let (mock_client_state, mock_cs_state) = create_mock_client_and_cs_state();
    // // let message = make_message!(
    // //     ibc::MsgCreateClient::new(
    // //         ibc::Any::from(mock_client_state),
    // //         ibc::Any::from(mock_cs_state),
    // //         ibc::Signer::from(authority.pubkey().to_string()),
    // //     ),
    // //     ibc::ClientMsg::CreateClient,
    // //     ibc::MsgEnvelope::Client,
    // // );

    // println!(
    //     "\nSplitting the message into chunks and sending it to write-account \
    //      program"
    // );
    // let mut instruction_data =
    //     anchor_lang::InstructionData::data(&instruction::Deliver { message });
    // let instruction_len = instruction_data.len() as u32;
    // instruction_data.splice(..0, instruction_len.to_le_bytes());

    // let blockhash = sol_rpc_client.get_latest_blockhash().unwrap();

    // let (mut chunks, chunk_account, _) = write::instruction::WriteIter::new(
    //     &write_account_program_id,
    //     authority.pubkey(),
    //     WRITE_ACCOUNT_SEED,
    //     instruction_data,
    // )
    // .unwrap();
    // // Note: Weâ€™re using small chunks size on purpose to test the behaviour of
    // // the write account program.
    // chunks.chunk_size = core::num::NonZeroU16::new(500).unwrap();
    // for instruction in &mut chunks {
    //     let transaction = Transaction::new_signed_with_payer(
    //         &[instruction],
    //         Some(&authority.pubkey()),
    //         &[&*authority],
    //         blockhash,
    //     );
    //     let sig = sol_rpc_client
    //         .send_and_confirm_transaction_with_spinner(&transaction)
    //         .unwrap();
    //     println!("  Signature {sig}");
    // }
    // let (write_account, write_account_bump) = chunks.into_account();

    // println!("\nCreating Mock Client");
    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         2_000_000u32,
    //     ))
    //     .instruction(ComputeBudgetInstruction::request_heap_frame(128 * 1024))
    //     .accounts(ix_data_account::Accounts::new(
    //         accounts::Deliver {
    //             sender: authority.pubkey(),
    //             receiver: None,
    //             storage,
    //             trie,
    //             chain,
    //             system_program: system_program::ID,
    //             mint_authority: None,
    //             token_mint: None,
    //             escrow_account: None,
    //             receiver_token_account: None,
    //             associated_token_program: None,
    //             token_program: None,
    //         },
    //         chunk_account,
    //     ))
    //     .args(ix_data_account::Instruction)
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let msg = MsgUpdateClient {
    //     client_id: ibc::ClientId::from_str("07-tendermint-0").unwrap(),
    //     client_message: ibc::Any {
    //         type_url: "/ibc.lightclients.tendermint.v1.Header".to_owned(),
    //         value: vec![
    //             10, 228, 13, 10, 152, 3, 10, 2, 8, 11, 18, 16, 98, 97, 110,
    //             107, 115, 121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //             24, 221, 169, 78, 34, 12, 8, 223, 206, 188, 176, 6, 16, 140,
    //             236, 147, 216, 3, 42, 72, 10, 32, 96, 199, 125, 164, 151, 189,
    //             219, 253, 212, 149, 194, 73, 248, 46, 188, 113, 36, 159, 4,
    //             216, 169, 40, 107, 230, 177, 243, 211, 170, 121, 66, 163, 134,
    //             18, 36, 8, 1, 18, 32, 24, 42, 79, 123, 90, 174, 37, 168, 161,
    //             15, 119, 59, 17, 217, 197, 125, 55, 54, 12, 81, 193, 229, 156,
    //             98, 96, 93, 174, 187, 200, 85, 167, 208, 50, 32, 1, 116, 249,
    //             53, 120, 189, 86, 125, 154, 6, 110, 138, 234, 175, 9, 119, 227,
    //             182, 26, 25, 179, 68, 246, 0, 240, 25, 140, 91, 121, 178, 138,
    //             244, 58, 32, 227, 176, 196, 66, 152, 252, 28, 20, 154, 251,
    //             244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147,
    //             76, 164, 149, 153, 27, 120, 82, 184, 85, 66, 32, 242, 84, 247,
    //             17, 69, 95, 217, 194, 224, 202, 181, 25, 214, 203, 28, 110,
    //             179, 138, 12, 217, 52, 188, 8, 131, 199, 195, 2, 194, 47, 140,
    //             234, 188, 74, 32, 242, 84, 247, 17, 69, 95, 217, 194, 224, 202,
    //             181, 25, 214, 203, 28, 110, 179, 138, 12, 217, 52, 188, 8, 131,
    //             199, 195, 2, 194, 47, 140, 234, 188, 82, 32, 27, 242, 85, 108,
    //             165, 213, 215, 239, 251, 84, 15, 52, 203, 15, 252, 119, 163,
    //             32, 46, 50, 39, 85, 87, 175, 189, 33, 152, 130, 169, 228, 42,
    //             207, 90, 32, 236, 57, 126, 184, 104, 130, 51, 39, 135, 113, 44,
    //             44, 214, 69, 158, 82, 23, 134, 177, 50, 246, 222, 178, 161, 23,
    //             16, 249, 208, 123, 92, 47, 124, 98, 32, 193, 52, 104, 185, 73,
    //             186, 220, 138, 243, 178, 123, 233, 0, 8, 7, 183, 74, 242, 110,
    //             102, 43, 234, 181, 127, 249, 200, 151, 47, 142, 232, 97, 220,
    //             106, 32, 227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244,
    //             200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76,
    //             164, 149, 153, 27, 120, 82, 184, 85, 114, 20, 237, 69, 179,
    //             191, 155, 55, 196, 239, 5, 136, 149, 117, 137, 243, 169, 87,
    //             49, 165, 195, 45, 18, 198, 10, 8, 221, 169, 78, 26, 72, 10, 32,
    //             75, 94, 233, 25, 38, 49, 131, 125, 18, 7, 142, 157, 151, 0,
    //             232, 199, 226, 157, 67, 140, 180, 159, 209, 242, 185, 189, 179,
    //             73, 21, 156, 151, 149, 18, 36, 8, 1, 18, 32, 196, 24, 253, 21,
    //             214, 145, 177, 116, 174, 91, 5, 75, 47, 136, 143, 230, 99, 59,
    //             159, 95, 51, 32, 60, 137, 137, 244, 212, 101, 61, 167, 15, 181,
    //             34, 104, 8, 2, 18, 20, 147, 219, 80, 47, 119, 180, 210, 182,
    //             205, 97, 163, 76, 67, 122, 47, 136, 124, 193, 176, 36, 26, 12,
    //             8, 229, 206, 188, 176, 6, 16, 214, 140, 128, 226, 2, 34, 64,
    //             82, 53, 23, 178, 197, 233, 29, 164, 192, 135, 39, 139, 215, 65,
    //             221, 27, 219, 29, 246, 156, 196, 194, 172, 213, 16, 38, 114,
    //             210, 144, 209, 173, 244, 202, 76, 84, 107, 161, 198, 1, 38,
    //             192, 240, 228, 218, 64, 36, 96, 35, 13, 133, 212, 80, 43, 172,
    //             180, 178, 247, 155, 191, 144, 159, 217, 79, 5, 34, 104, 8, 2,
    //             18, 20, 69, 165, 122, 13, 83, 211, 84, 100, 98, 44, 163, 106,
    //             147, 132, 55, 174, 147, 65, 119, 103, 26, 12, 8, 229, 206, 188,
    //             176, 6, 16, 227, 215, 234, 187, 2, 34, 64, 110, 66, 254, 226,
    //             162, 90, 5, 166, 72, 131, 27, 16, 129, 33, 157, 232, 163, 190,
    //             254, 123, 156, 87, 119, 217, 140, 36, 104, 169, 208, 111, 172,
    //             226, 96, 26, 42, 203, 220, 133, 235, 100, 221, 222, 198, 60,
    //             98, 184, 167, 164, 50, 230, 193, 70, 141, 172, 222, 48, 32,
    //             190, 14, 35, 10, 187, 143, 4, 34, 104, 8, 2, 18, 20, 13, 5, 26,
    //             214, 77, 107, 176, 77, 78, 112, 185, 21, 24, 108, 221, 83, 13,
    //             62, 121, 151, 26, 12, 8, 229, 206, 188, 176, 6, 16, 254, 221,
    //             184, 190, 2, 34, 64, 185, 187, 18, 142, 71, 189, 110, 64, 213,
    //             34, 47, 94, 164, 236, 130, 244, 123, 0, 20, 176, 148, 139, 237,
    //             87, 104, 15, 108, 176, 140, 14, 179, 158, 125, 30, 8, 187, 214,
    //             36, 52, 167, 166, 220, 24, 232, 103, 179, 105, 25, 223, 114,
    //             76, 161, 28, 44, 147, 84, 161, 191, 115, 243, 220, 30, 58, 10,
    //             34, 104, 8, 2, 18, 20, 81, 98, 22, 2, 202, 251, 82, 138, 217,
    //             0, 60, 116, 66, 248, 9, 190, 190, 79, 231, 191, 26, 12, 8, 229,
    //             206, 188, 176, 6, 16, 237, 154, 226, 231, 2, 34, 64, 41, 150,
    //             215, 150, 72, 89, 154, 92, 5, 232, 249, 192, 15, 169, 117, 138,
    //             76, 195, 115, 195, 113, 198, 189, 69, 139, 25, 140, 156, 188,
    //             45, 54, 130, 4, 121, 67, 193, 154, 166, 150, 151, 198, 223,
    //             181, 181, 255, 107, 93, 4, 55, 159, 178, 153, 153, 243, 56,
    //             159, 244, 185, 148, 83, 146, 182, 42, 13, 34, 104, 8, 2, 18,
    //             20, 54, 21, 18, 26, 51, 177, 170, 50, 168, 252, 168, 252, 15,
    //             222, 189, 5, 221, 110, 50, 152, 26, 12, 8, 229, 206, 188, 176,
    //             6, 16, 207, 156, 255, 231, 2, 34, 64, 241, 50, 51, 97, 141,
    //             126, 205, 157, 102, 34, 162, 185, 43, 148, 206, 111, 255, 166,
    //             216, 54, 102, 133, 106, 8, 233, 182, 57, 88, 81, 243, 217, 217,
    //             228, 138, 198, 54, 227, 126, 178, 181, 177, 84, 192, 148, 199,
    //             34, 207, 105, 115, 21, 180, 194, 18, 128, 136, 180, 228, 242,
    //             36, 73, 127, 252, 43, 10, 34, 104, 8, 2, 18, 20, 244, 248, 157,
    //             156, 220, 182, 222, 33, 28, 26, 20, 85, 184, 7, 40, 238, 82,
    //             114, 68, 197, 26, 12, 8, 229, 206, 188, 176, 6, 16, 254, 226,
    //             240, 230, 2, 34, 64, 16, 50, 94, 248, 184, 19, 205, 242, 187,
    //             92, 66, 213, 91, 50, 152, 201, 238, 70, 99, 26, 30, 7, 120, 31,
    //             200, 141, 64, 68, 141, 241, 253, 17, 211, 240, 197, 228, 43,
    //             54, 61, 247, 218, 10, 142, 224, 78, 193, 227, 100, 152, 196,
    //             196, 93, 178, 30, 167, 117, 83, 205, 77, 161, 219, 231, 155, 5,
    //             34, 104, 8, 2, 18, 20, 237, 69, 179, 191, 155, 55, 196, 239, 5,
    //             136, 149, 117, 137, 243, 169, 87, 49, 165, 195, 45, 26, 12, 8,
    //             229, 206, 188, 176, 6, 16, 152, 171, 185, 133, 3, 34, 64, 161,
    //             106, 235, 47, 86, 194, 191, 193, 226, 39, 65, 164, 218, 180,
    //             216, 252, 98, 149, 175, 59, 109, 110, 100, 134, 30, 11, 109,
    //             182, 54, 151, 205, 50, 57, 73, 219, 134, 29, 100, 33, 244, 9,
    //             69, 7, 20, 1, 93, 78, 241, 119, 12, 192, 70, 60, 84, 44, 19,
    //             49, 134, 184, 245, 162, 2, 69, 6, 34, 104, 8, 2, 18, 20, 104,
    //             31, 73, 15, 235, 100, 54, 120, 85, 252, 24, 183, 125, 239, 98,
    //             52, 23, 155, 179, 22, 26, 12, 8, 229, 206, 188, 176, 6, 16,
    //             215, 205, 131, 235, 2, 34, 64, 153, 44, 232, 172, 139, 18, 157,
    //             255, 85, 219, 137, 123, 186, 120, 70, 195, 180, 59, 216, 85,
    //             226, 168, 185, 196, 219, 173, 54, 126, 188, 142, 70, 64, 103,
    //             15, 147, 130, 48, 157, 7, 122, 6, 130, 106, 10, 133, 200, 67,
    //             210, 48, 100, 216, 231, 189, 165, 130, 39, 218, 230, 193, 97,
    //             167, 213, 132, 7, 34, 104, 8, 2, 18, 20, 21, 123, 235, 164,
    //             248, 111, 40, 82, 37, 118, 21, 31, 131, 143, 4, 131, 235, 62,
    //             250, 74, 26, 12, 8, 229, 206, 188, 176, 6, 16, 147, 226, 217,
    //             235, 2, 34, 64, 27, 7, 8, 30, 38, 93, 74, 59, 197, 10, 180,
    //             228, 205, 36, 220, 201, 55, 8, 209, 150, 104, 11, 254, 91, 79,
    //             33, 128, 190, 156, 36, 23, 64, 125, 183, 73, 238, 21, 58, 86,
    //             250, 252, 107, 165, 28, 184, 253, 128, 5, 121, 115, 101, 43,
    //             159, 12, 15, 95, 235, 89, 173, 250, 98, 5, 154, 12, 34, 104, 8,
    //             2, 18, 20, 182, 190, 97, 36, 199, 149, 3, 20, 64, 9, 65, 158,
    //             239, 184, 205, 241, 35, 135, 61, 226, 26, 12, 8, 229, 206, 188,
    //             176, 6, 16, 136, 177, 158, 246, 2, 34, 64, 29, 243, 23, 136,
    //             245, 233, 137, 110, 113, 11, 142, 101, 89, 68, 170, 255, 101,
    //             88, 240, 81, 37, 170, 107, 183, 26, 6, 253, 93, 176, 234, 72,
    //             205, 245, 178, 83, 71, 238, 158, 208, 38, 110, 176, 179, 124,
    //             157, 194, 84, 23, 131, 73, 227, 179, 187, 180, 127, 108, 190,
    //             42, 102, 87, 193, 246, 39, 0, 34, 104, 8, 2, 18, 20, 58, 246,
    //             119, 119, 16, 236, 185, 106, 114, 217, 77, 188, 226, 161, 124,
    //             215, 55, 194, 87, 117, 26, 12, 8, 229, 206, 188, 176, 6, 16,
    //             181, 150, 247, 186, 2, 34, 64, 197, 237, 104, 53, 17, 27, 255,
    //             21, 201, 43, 64, 162, 28, 131, 58, 125, 123, 248, 65, 45, 62,
    //             81, 181, 246, 148, 61, 157, 108, 250, 105, 154, 116, 11, 106,
    //             61, 14, 234, 155, 93, 255, 254, 243, 245, 204, 207, 75, 79, 71,
    //             91, 33, 2, 178, 198, 182, 52, 57, 87, 20, 213, 204, 180, 12,
    //             65, 6, 34, 104, 8, 2, 18, 20, 52, 186, 78, 38, 65, 58, 218,
    //             157, 55, 127, 122, 102, 168, 27, 8, 101, 141, 208, 102, 27, 26,
    //             12, 8, 229, 206, 188, 176, 6, 16, 130, 220, 230, 193, 2, 34,
    //             64, 149, 220, 146, 70, 83, 122, 56, 28, 202, 47, 234, 119, 2,
    //             147, 2, 94, 243, 4, 127, 159, 183, 195, 89, 246, 133, 232, 138,
    //             57, 32, 212, 59, 6, 171, 101, 47, 156, 32, 181, 205, 169, 107,
    //             73, 5, 65, 249, 190, 126, 75, 70, 221, 150, 243, 112, 201, 241,
    //             19, 103, 192, 113, 13, 6, 121, 49, 15, 18, 238, 6, 10, 65, 10,
    //             20, 147, 219, 80, 47, 119, 180, 210, 182, 205, 97, 163, 76, 67,
    //             122, 47, 136, 124, 193, 176, 36, 18, 34, 10, 32, 58, 216, 70,
    //             53, 81, 202, 230, 255, 230, 114, 57, 127, 213, 92, 106, 48, 54,
    //             202, 226, 135, 50, 16, 58, 144, 251, 110, 244, 70, 221, 125, 5,
    //             98, 24, 208, 210, 208, 226, 240, 2, 10, 65, 10, 20, 69, 165,
    //             122, 13, 83, 211, 84, 100, 98, 44, 163, 106, 147, 132, 55, 174,
    //             147, 65, 119, 103, 18, 34, 10, 32, 34, 210, 136, 70, 151, 67,
    //             159, 228, 226, 142, 161, 243, 130, 48, 79, 91, 97, 91, 142,
    //             191, 127, 2, 165, 44, 206, 138, 130, 247, 236, 32, 196, 151,
    //             24, 213, 220, 231, 142, 237, 2, 10, 65, 10, 20, 13, 5, 26, 214,
    //             77, 107, 176, 77, 78, 112, 185, 21, 24, 108, 221, 83, 13, 62,
    //             121, 151, 18, 34, 10, 32, 0, 106, 76, 231, 169, 142, 219, 171,
    //             243, 144, 29, 151, 96, 141, 187, 163, 150, 196, 38, 218, 178,
    //             157, 176, 89, 190, 3, 54, 241, 207, 159, 94, 37, 24, 159, 144,
    //             187, 187, 233, 2, 10, 65, 10, 20, 81, 98, 22, 2, 202, 251, 82,
    //             138, 217, 0, 60, 116, 66, 248, 9, 190, 190, 79, 231, 191, 18,
    //             34, 10, 32, 139, 162, 107, 25, 150, 113, 7, 43, 129, 213, 7,
    //             105, 250, 217, 19, 51, 45, 194, 53, 166, 164, 123, 90, 19, 238,
    //             25, 122, 25, 124, 65, 95, 220, 24, 184, 186, 186, 187, 233, 2,
    //             10, 65, 10, 20, 54, 21, 18, 26, 51, 177, 170, 50, 168, 252,
    //             168, 252, 15, 222, 189, 5, 221, 110, 50, 152, 18, 34, 10, 32,
    //             43, 160, 69, 226, 224, 80, 136, 67, 93, 248, 141, 84, 8, 181,
    //             193, 158, 93, 130, 177, 110, 78, 75, 161, 32, 199, 66, 227,
    //             200, 100, 92, 9, 109, 24, 162, 140, 233, 145, 233, 2, 10, 65,
    //             10, 20, 244, 248, 157, 156, 220, 182, 222, 33, 28, 26, 20, 85,
    //             184, 7, 40, 238, 82, 114, 68, 197, 18, 34, 10, 32, 116, 222,
    //             82, 130, 202, 38, 224, 172, 253, 129, 223, 96, 113, 117, 109,
    //             113, 60, 46, 208, 52, 90, 151, 118, 241, 170, 61, 169, 71, 223,
    //             207, 245, 11, 24, 226, 149, 228, 236, 229, 2, 10, 65, 10, 20,
    //             237, 69, 179, 191, 155, 55, 196, 239, 5, 136, 149, 117, 137,
    //             243, 169, 87, 49, 165, 195, 45, 18, 34, 10, 32, 160, 119, 151,
    //             2, 173, 29, 117, 252, 52, 250, 87, 167, 37, 118, 17, 215, 9,
    //             165, 86, 2, 215, 20, 126, 182, 110, 195, 28, 50, 22, 25, 92,
    //             231, 24, 235, 165, 227, 221, 222, 2, 10, 65, 10, 20, 104, 31,
    //             73, 15, 235, 100, 54, 120, 85, 252, 24, 183, 125, 239, 98, 52,
    //             23, 155, 179, 22, 18, 34, 10, 32, 207, 147, 139, 8, 254, 61,
    //             217, 24, 99, 221, 80, 52, 108, 191, 93, 131, 120, 192, 145, 17,
    //             127, 251, 179, 121, 219, 58, 195, 83, 215, 241, 245, 140, 24,
    //             137, 238, 162, 221, 222, 2, 10, 65, 10, 20, 21, 123, 235, 164,
    //             248, 111, 40, 82, 37, 118, 21, 31, 131, 143, 4, 131, 235, 62,
    //             250, 74, 18, 34, 10, 32, 172, 232, 182, 83, 91, 76, 74, 147,
    //             163, 100, 190, 215, 156, 25, 65, 55, 185, 126, 179, 122, 252,
    //             31, 156, 14, 66, 71, 88, 123, 250, 91, 224, 231, 24, 220, 230,
    //             162, 221, 222, 2, 10, 65, 10, 20, 182, 190, 97, 36, 199, 149,
    //             3, 20, 64, 9, 65, 158, 239, 184, 205, 241, 35, 135, 61, 226,
    //             18, 34, 10, 32, 181, 247, 74, 253, 155, 67, 226, 232, 28, 232,
    //             25, 49, 117, 133, 203, 232, 225, 76, 156, 101, 193, 156, 65,
    //             234, 41, 178, 119, 50, 93, 24, 131, 183, 24, 174, 223, 162,
    //             221, 222, 2, 10, 65, 10, 20, 58, 246, 119, 119, 16, 236, 185,
    //             106, 114, 217, 77, 188, 226, 161, 124, 215, 55, 194, 87, 117,
    //             18, 34, 10, 32, 133, 75, 229, 21, 61, 212, 251, 216, 114, 118,
    //             241, 69, 23, 48, 138, 20, 28, 192, 57, 117, 192, 48, 122, 6,
    //             13, 71, 48, 152, 198, 116, 217, 238, 24, 178, 143, 166, 244,
    //             208, 2, 10, 65, 10, 20, 52, 186, 78, 38, 65, 58, 218, 157, 55,
    //             127, 122, 102, 168, 27, 8, 101, 141, 208, 102, 27, 18, 34, 10,
    //             32, 75, 74, 246, 57, 22, 126, 215, 143, 126, 74, 46, 222, 152,
    //             12, 3, 0, 24, 66, 17, 130, 187, 10, 95, 90, 148, 24, 3, 181,
    //             215, 140, 58, 115, 24, 208, 204, 174, 171, 182, 1, 18, 65, 10,
    //             20, 237, 69, 179, 191, 155, 55, 196, 239, 5, 136, 149, 117,
    //             137, 243, 169, 87, 49, 165, 195, 45, 18, 34, 10, 32, 160, 119,
    //             151, 2, 173, 29, 117, 252, 52, 250, 87, 167, 37, 118, 17, 215,
    //             9, 165, 86, 2, 215, 20, 126, 182, 110, 195, 28, 50, 22, 25, 92,
    //             231, 24, 235, 165, 227, 221, 222, 2, 24, 128, 210, 155, 252,
    //             129, 32, 26, 6, 8, 5, 16, 209, 169, 78, 34, 238, 6, 10, 65, 10,
    //             20, 147, 219, 80, 47, 119, 180, 210, 182, 205, 97, 163, 76, 67,
    //             122, 47, 136, 124, 193, 176, 36, 18, 34, 10, 32, 58, 216, 70,
    //             53, 81, 202, 230, 255, 230, 114, 57, 127, 213, 92, 106, 48, 54,
    //             202, 226, 135, 50, 16, 58, 144, 251, 110, 244, 70, 221, 125, 5,
    //             98, 24, 208, 210, 208, 226, 240, 2, 10, 65, 10, 20, 69, 165,
    //             122, 13, 83, 211, 84, 100, 98, 44, 163, 106, 147, 132, 55, 174,
    //             147, 65, 119, 103, 18, 34, 10, 32, 34, 210, 136, 70, 151, 67,
    //             159, 228, 226, 142, 161, 243, 130, 48, 79, 91, 97, 91, 142,
    //             191, 127, 2, 165, 44, 206, 138, 130, 247, 236, 32, 196, 151,
    //             24, 213, 220, 231, 142, 237, 2, 10, 65, 10, 20, 13, 5, 26, 214,
    //             77, 107, 176, 77, 78, 112, 185, 21, 24, 108, 221, 83, 13, 62,
    //             121, 151, 18, 34, 10, 32, 0, 106, 76, 231, 169, 142, 219, 171,
    //             243, 144, 29, 151, 96, 141, 187, 163, 150, 196, 38, 218, 178,
    //             157, 176, 89, 190, 3, 54, 241, 207, 159, 94, 37, 24, 159, 144,
    //             187, 187, 233, 2, 10, 65, 10, 20, 81, 98, 22, 2, 202, 251, 82,
    //             138, 217, 0, 60, 116, 66, 248, 9, 190, 190, 79, 231, 191, 18,
    //             34, 10, 32, 139, 162, 107, 25, 150, 113, 7, 43, 129, 213, 7,
    //             105, 250, 217, 19, 51, 45, 194, 53, 166, 164, 123, 90, 19, 238,
    //             25, 122, 25, 124, 65, 95, 220, 24, 184, 186, 186, 187, 233, 2,
    //             10, 65, 10, 20, 54, 21, 18, 26, 51, 177, 170, 50, 168, 252,
    //             168, 252, 15, 222, 189, 5, 221, 110, 50, 152, 18, 34, 10, 32,
    //             43, 160, 69, 226, 224, 80, 136, 67, 93, 248, 141, 84, 8, 181,
    //             193, 158, 93, 130, 177, 110, 78, 75, 161, 32, 199, 66, 227,
    //             200, 100, 92, 9, 109, 24, 162, 140, 233, 145, 233, 2, 10, 65,
    //             10, 20, 244, 248, 157, 156, 220, 182, 222, 33, 28, 26, 20, 85,
    //             184, 7, 40, 238, 82, 114, 68, 197, 18, 34, 10, 32, 116, 222,
    //             82, 130, 202, 38, 224, 172, 253, 129, 223, 96, 113, 117, 109,
    //             113, 60, 46, 208, 52, 90, 151, 118, 241, 170, 61, 169, 71, 223,
    //             207, 245, 11, 24, 226, 149, 228, 236, 229, 2, 10, 65, 10, 20,
    //             237, 69, 179, 191, 155, 55, 196, 239, 5, 136, 149, 117, 137,
    //             243, 169, 87, 49, 165, 195, 45, 18, 34, 10, 32, 160, 119, 151,
    //             2, 173, 29, 117, 252, 52, 250, 87, 167, 37, 118, 17, 215, 9,
    //             165, 86, 2, 215, 20, 126, 182, 110, 195, 28, 50, 22, 25, 92,
    //             231, 24, 235, 165, 227, 221, 222, 2, 10, 65, 10, 20, 104, 31,
    //             73, 15, 235, 100, 54, 120, 85, 252, 24, 183, 125, 239, 98, 52,
    //             23, 155, 179, 22, 18, 34, 10, 32, 207, 147, 139, 8, 254, 61,
    //             217, 24, 99, 221, 80, 52, 108, 191, 93, 131, 120, 192, 145, 17,
    //             127, 251, 179, 121, 219, 58, 195, 83, 215, 241, 245, 140, 24,
    //             137, 238, 162, 221, 222, 2, 10, 65, 10, 20, 21, 123, 235, 164,
    //             248, 111, 40, 82, 37, 118, 21, 31, 131, 143, 4, 131, 235, 62,
    //             250, 74, 18, 34, 10, 32, 172, 232, 182, 83, 91, 76, 74, 147,
    //             163, 100, 190, 215, 156, 25, 65, 55, 185, 126, 179, 122, 252,
    //             31, 156, 14, 66, 71, 88, 123, 250, 91, 224, 231, 24, 220, 230,
    //             162, 221, 222, 2, 10, 65, 10, 20, 182, 190, 97, 36, 199, 149,
    //             3, 20, 64, 9, 65, 158, 239, 184, 205, 241, 35, 135, 61, 226,
    //             18, 34, 10, 32, 181, 247, 74, 253, 155, 67, 226, 232, 28, 232,
    //             25, 49, 117, 133, 203, 232, 225, 76, 156, 101, 193, 156, 65,
    //             234, 41, 178, 119, 50, 93, 24, 131, 183, 24, 174, 223, 162,
    //             221, 222, 2, 10, 65, 10, 20, 58, 246, 119, 119, 16, 236, 185,
    //             106, 114, 217, 77, 188, 226, 161, 124, 215, 55, 194, 87, 117,
    //             18, 34, 10, 32, 133, 75, 229, 21, 61, 212, 251, 216, 114, 118,
    //             241, 69, 23, 48, 138, 20, 28, 192, 57, 117, 192, 48, 122, 6,
    //             13, 71, 48, 152, 198, 116, 217, 238, 24, 178, 143, 166, 244,
    //             208, 2, 10, 65, 10, 20, 52, 186, 78, 38, 65, 58, 218, 157, 55,
    //             127, 122, 102, 168, 27, 8, 101, 141, 208, 102, 27, 18, 34, 10,
    //             32, 75, 74, 246, 57, 22, 126, 215, 143, 126, 74, 46, 222, 152,
    //             12, 3, 0, 24, 66, 17, 130, 187, 10, 95, 90, 148, 24, 3, 181,
    //             215, 140, 58, 115, 24, 208, 204, 174, 171, 182, 1, 18, 65, 10,
    //             20, 81, 98, 22, 2, 202, 251, 82, 138, 217, 0, 60, 116, 66, 248,
    //             9, 190, 190, 79, 231, 191, 18, 34, 10, 32, 139, 162, 107, 25,
    //             150, 113, 7, 43, 129, 213, 7, 105, 250, 217, 19, 51, 45, 194,
    //             53, 166, 164, 123, 90, 19, 238, 25, 122, 25, 124, 65, 95, 220,
    //             24, 184, 186, 186, 187, 233, 2, 24, 128, 210, 155, 252, 129,
    //             32,
    //         ],
    //     },
    //     signer: String::from("oxyzEsUj9CV6HsqPCUZqVwrFJJvpd9iCBrPdzTBWLBb")
    //         .into(),
    // };

    // // let signature_program_id =
    // //     Pubkey::from_str("4H4SKz4TbjYDDPXKew5CGUKGmmWSv3EfJKfixoA6Bxuo")
    // //         .unwrap();
    // let authority_bytes = authority.pubkey().to_bytes();
    // let signature_seeds = &[authority_bytes.as_ref()];
    // let (signatures_account_pda, bump) =
    //     Pubkey::find_program_address(signature_seeds, &signature_program_id);
    // let accounts = vec![
    //     AccountMeta {
    //         pubkey: authority.pubkey(),
    //         is_signer: true,
    //         is_writable: true,
    //     },
    //     AccountMeta {
    //         pubkey: signatures_account_pda,
    //         is_signer: false,
    //         is_writable: true,
    //     },
    //     AccountMeta {
    //         pubkey: anchor_lang::solana_program::sysvar::instructions::ID,
    //         is_signer: false,
    //         is_writable: true,
    //     },
    //     AccountMeta {
    //         pubkey: system_program::ID,
    //         is_signer: false,
    //         is_writable: true,
    //     },
    // ];
    // let mut data = vec![0, 0];
    // data.extend(&bump.to_le_bytes());
    // let messages = vec![
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 165, 230, 140, 171, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 209, 176, 221, 132, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 138, 242, 242, 142, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 157, 239, 145, 176, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 185, 172, 232, 167, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 248, 166, 158, 176, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 165, 171, 199, 217, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 131, 161, 141, 182, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 231, 240, 212, 179, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 217, 194, 209, 178, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 252, 227, 195, 129, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    //     vec![
    //         117, 8, 2, 17, 49, 149, 19, 0, 0, 0, 0, 0, 34, 72, 10, 32, 205,
    //         232, 189, 79, 0, 68, 172, 124, 220, 26, 226, 87, 94, 143, 93, 11,
    //         209, 244, 32, 236, 185, 102, 165, 140, 196, 167, 229, 23, 55, 72,
    //         89, 94, 18, 36, 8, 1, 18, 32, 42, 206, 74, 63, 170, 83, 60, 130,
    //         45, 146, 65, 0, 47, 229, 167, 173, 127, 188, 22, 40, 2, 35, 222,
    //         106, 74, 91, 172, 250, 38, 89, 114, 1, 42, 12, 8, 188, 210, 188,
    //         176, 6, 16, 153, 143, 174, 139, 3, 50, 16, 98, 97, 110, 107, 115,
    //         121, 45, 116, 101, 115, 116, 110, 101, 116, 45, 53,
    //     ],
    // ];
    // let pubkeys = vec![
    //     vec![
    //         58, 216, 70, 53, 81, 202, 230, 255, 230, 114, 57, 127, 213, 92,
    //         106, 48, 54, 202, 226, 135, 50, 16, 58, 144, 251, 110, 244, 70,
    //         221, 125, 5, 98,
    //     ],
    //     vec![
    //         34, 210, 136, 70, 151, 67, 159, 228, 226, 142, 161, 243, 130, 48,
    //         79, 91, 97, 91, 142, 191, 127, 2, 165, 44, 206, 138, 130, 247, 236,
    //         32, 196, 151,
    //     ],
    //     vec![
    //         0, 106, 76, 231, 169, 142, 219, 171, 243, 144, 29, 151, 96, 141,
    //         187, 163, 150, 196, 38, 218, 178, 157, 176, 89, 190, 3, 54, 241,
    //         207, 159, 94, 37,
    //     ],
    //     vec![
    //         139, 162, 107, 25, 150, 113, 7, 43, 129, 213, 7, 105, 250, 217, 19,
    //         51, 45, 194, 53, 166, 164, 123, 90, 19, 238, 25, 122, 25, 124, 65,
    //         95, 220,
    //     ],
    //     vec![
    //         43, 160, 69, 226, 224, 80, 136, 67, 93, 248, 141, 84, 8, 181, 193,
    //         158, 93, 130, 177, 110, 78, 75, 161, 32, 199, 66, 227, 200, 100,
    //         92, 9, 109,
    //     ],
    //     vec![
    //         116, 222, 82, 130, 202, 38, 224, 172, 253, 129, 223, 96, 113, 117,
    //         109, 113, 60, 46, 208, 52, 90, 151, 118, 241, 170, 61, 169, 71,
    //         223, 207, 245, 11,
    //     ],
    //     vec![
    //         160, 119, 151, 2, 173, 29, 117, 252, 52, 250, 87, 167, 37, 118, 17,
    //         215, 9, 165, 86, 2, 215, 20, 126, 182, 110, 195, 28, 50, 22, 25,
    //         92, 231,
    //     ],
    //     vec![
    //         207, 147, 139, 8, 254, 61, 217, 24, 99, 221, 80, 52, 108, 191, 93,
    //         131, 120, 192, 145, 17, 127, 251, 179, 121, 219, 58, 195, 83, 215,
    //         241, 245, 140,
    //     ],
    //     vec![
    //         172, 232, 182, 83, 91, 76, 74, 147, 163, 100, 190, 215, 156, 25,
    //         65, 55, 185, 126, 179, 122, 252, 31, 156, 14, 66, 71, 88, 123, 250,
    //         91, 224, 231,
    //     ],
    //     vec![
    //         181, 247, 74, 253, 155, 67, 226, 232, 28, 232, 25, 49, 117, 133,
    //         203, 232, 225, 76, 156, 101, 193, 156, 65, 234, 41, 178, 119, 50,
    //         93, 24, 131, 183,
    //     ],
    //     vec![
    //         133, 75, 229, 21, 61, 212, 251, 216, 114, 118, 241, 69, 23, 48,
    //         138, 20, 28, 192, 57, 117, 192, 48, 122, 6, 13, 71, 48, 152, 198,
    //         116, 217, 238,
    //     ],
    //     vec![
    //         75, 74, 246, 57, 22, 126, 215, 143, 126, 74, 46, 222, 152, 12, 3,
    //         0, 24, 66, 17, 130, 187, 10, 95, 90, 148, 24, 3, 181, 215, 140, 58,
    //         115,
    //     ],
    // ];
    // let final_signatures = vec![
    //     vec![
    //         132, 183, 167, 36, 135, 84, 42, 20, 104, 171, 123, 39, 255, 131,
    //         180, 31, 45, 72, 190, 114, 215, 94, 231, 117, 137, 244, 178, 227,
    //         186, 42, 186, 40, 94, 68, 26, 87, 154, 56, 60, 74, 100, 112, 44,
    //         12, 212, 199, 21, 85, 151, 77, 208, 167, 203, 26, 95, 0, 113, 213,
    //         167, 105, 68, 246, 127, 8,
    //     ],
    //     vec![
    //         122, 45, 91, 112, 37, 50, 94, 150, 120, 132, 214, 63, 12, 84, 26,
    //         181, 246, 86, 225, 58, 30, 16, 179, 2, 253, 102, 113, 194, 66, 225,
    //         154, 147, 34, 93, 168, 226, 40, 199, 55, 182, 22, 86, 80, 150, 48,
    //         233, 15, 93, 94, 28, 240, 214, 67, 73, 89, 171, 44, 107, 122, 156,
    //         58, 248, 89, 15,
    //     ],
    //     vec![
    //         27, 78, 157, 182, 191, 37, 52, 188, 4, 168, 85, 95, 32, 95, 235,
    //         200, 208, 205, 124, 243, 136, 65, 59, 223, 216, 72, 227, 249, 123,
    //         155, 72, 2, 164, 128, 179, 127, 244, 229, 164, 48, 46, 8, 31, 170,
    //         47, 65, 102, 147, 53, 173, 4, 85, 130, 128, 94, 25, 85, 177, 181,
    //         157, 95, 120, 172, 1,
    //     ],
    //     vec![
    //         109, 241, 88, 77, 59, 93, 38, 77, 205, 110, 211, 10, 221, 229, 234,
    //         119, 57, 63, 185, 73, 28, 227, 143, 212, 103, 249, 140, 62, 51, 23,
    //         145, 90, 105, 184, 176, 187, 10, 197, 118, 153, 16, 117, 62, 228,
    //         117, 98, 77, 207, 51, 55, 204, 79, 131, 62, 67, 215, 217, 89, 138,
    //         238, 238, 38, 183, 0,
    //     ],
    //     vec![
    //         202, 16, 68, 3, 46, 203, 123, 124, 129, 158, 9, 202, 44, 137, 254,
    //         77, 249, 179, 106, 132, 215, 97, 166, 183, 74, 69, 11, 142, 174,
    //         43, 6, 174, 132, 69, 184, 1, 29, 176, 240, 97, 6, 50, 29, 134, 157,
    //         66, 68, 167, 231, 173, 98, 221, 33, 117, 217, 79, 50, 132, 166,
    //         159, 145, 237, 89, 2,
    //     ],
    //     vec![
    //         201, 78, 24, 27, 111, 249, 242, 234, 234, 220, 146, 2, 240, 137,
    //         110, 66, 152, 182, 101, 11, 101, 146, 59, 191, 50, 207, 254, 177,
    //         24, 148, 50, 100, 226, 224, 213, 153, 235, 199, 23, 226, 241, 204,
    //         231, 37, 67, 58, 30, 81, 50, 154, 118, 233, 67, 143, 7, 216, 172,
    //         180, 226, 242, 42, 173, 119, 1,
    //     ],
    //     vec![
    //         4, 218, 87, 30, 220, 178, 101, 30, 111, 63, 236, 182, 23, 81, 246,
    //         40, 186, 182, 160, 165, 129, 58, 199, 58, 49, 255, 140, 241, 19,
    //         163, 35, 25, 211, 111, 10, 59, 61, 226, 243, 73, 174, 228, 224, 54,
    //         51, 77, 152, 16, 240, 119, 71, 84, 205, 209, 23, 181, 153, 106,
    //         195, 190, 28, 120, 255, 5,
    //     ],
    //     vec![
    //         241, 49, 166, 140, 95, 28, 249, 167, 23, 59, 238, 254, 71, 160,
    //         160, 126, 66, 220, 46, 112, 34, 89, 235, 212, 143, 105, 75, 66,
    //         249, 165, 254, 131, 157, 178, 206, 147, 89, 34, 25, 40, 51, 133,
    //         73, 67, 83, 221, 175, 179, 215, 124, 66, 222, 147, 190, 40, 38,
    //         216, 143, 187, 164, 182, 164, 135, 9,
    //     ],
    //     vec![
    //         25, 99, 132, 18, 107, 211, 137, 160, 161, 78, 178, 141, 138, 103,
    //         159, 3, 127, 254, 60, 55, 61, 186, 248, 74, 245, 55, 226, 70, 61,
    //         201, 182, 124, 150, 155, 76, 223, 220, 39, 156, 103, 166, 234, 243,
    //         12, 209, 116, 175, 237, 25, 116, 97, 206, 222, 56, 243, 207, 112,
    //         213, 232, 227, 69, 141, 201, 2,
    //     ],
    //     vec![
    //         138, 41, 25, 113, 45, 201, 201, 155, 42, 226, 231, 173, 16, 208,
    //         241, 102, 94, 194, 154, 59, 14, 96, 193, 80, 110, 117, 156, 158,
    //         95, 53, 9, 218, 109, 249, 238, 105, 13, 157, 211, 112, 82, 127,
    //         200, 94, 250, 122, 208, 182, 143, 40, 39, 8, 30, 155, 171, 208,
    //         121, 188, 17, 189, 213, 124, 227, 2,
    //     ],
    //     vec![
    //         43, 68, 22, 249, 22, 11, 157, 155, 199, 11, 16, 20, 209, 142, 47,
    //         57, 191, 197, 195, 165, 140, 232, 80, 214, 198, 35, 139, 243, 71,
    //         96, 66, 100, 233, 226, 129, 36, 126, 65, 1, 89, 188, 93, 242, 168,
    //         209, 243, 121, 145, 160, 132, 156, 146, 184, 184, 159, 89, 245,
    //         249, 78, 150, 43, 175, 25, 15,
    //     ],
    //     vec![
    //         79, 242, 134, 75, 127, 205, 27, 30, 148, 50, 119, 196, 222, 24,
    //         116, 253, 191, 164, 208, 9, 248, 192, 5, 228, 112, 54, 191, 218,
    //         30, 14, 158, 105, 178, 245, 7, 95, 158, 164, 40, 28, 240, 248, 112,
    //         78, 77, 185, 181, 185, 213, 118, 96, 92, 117, 227, 68, 24, 79, 44,
    //         141, 99, 84, 177, 254, 11,
    //     ],
    // ];
    // let instruction =
    //     Instruction::new_with_bytes(signature_program_id, &data, accounts);
    //     let final_one = final_signatures[0].clone();
    //     let final_one_inu64: [u8; 64] = final_one.clone().try_into().unwrap();

    //     let final_two = final_signatures[1].clone();
    //     let final_two_inu64: [u8; 64] = final_two.clone().try_into().unwrap();

    //     let pubkey_one = pubkeys[0].clone();
    //     let pubkey_one_inu64: [u8; 32] = pubkey_one.clone().try_into().unwrap();

    //     let pubkey_two = pubkeys[1].clone();
    //     let pubkey_two_inu64: [u8; 32] = pubkey_two.clone().try_into().unwrap();
    //     let entries = vec![
    //         Entry {
    //             pubkey: &pubkey_one_inu64,
    //             signature: &final_one_inu64,
    //             message: &messages[0],
    //         },
    //         Entry {
    //             pubkey: &pubkey_two_inu64,
    //             signature: &final_two_inu64,
    //             message: &messages[1],
    //         },
    //     ];
    //     let x = new_instruction(
    //         &entries
    //     ).unwrap();
    // let result = solana_sdk::ed25519_instruction::verify(&x.data, &[&x.data], &Default::default())
    //     .unwrap();
    // println!("Result {:?}", result);
    // let sig = program
    //     .request()
    //     .instruction(x)
    //     .instruction(instruction)
    //     .send()
    //     // .send_with_spinner_and_config(RpcSendTransactionConfig {
    //     //     skip_preflight: true,
    //     //     ..RpcSendTransactionConfig::default()
    //     // })
    //     .unwrap();
    // println!("This is signature for sending signature {:?}", sig);

    // let message = MsgEnvelope::Client(ClientMsg::UpdateClient(msg));

    // println!(
    //     "\nSplitting the message into chunks and sending it to write-account \
    //      program"
    // );
    // let mut instruction_data =
    //     anchor_lang::InstructionData::data(&instruction::Deliver { message });
    // let instruction_len = instruction_data.len() as u32;
    // instruction_data.splice(..0, instruction_len.to_le_bytes());

    // let blockhash = sol_rpc_client.get_latest_blockhash().unwrap();

    // let (mut chunks, chunk_account, _) = write::instruction::WriteIter::new(
    //     &write_account_program_id,
    //     authority.pubkey(),
    //     WRITE_ACCOUNT_SEED,
    //     instruction_data,
    // )
    // .unwrap();
    // // Note: Weâ€™re using small chunks size on purpose to test the behaviour of
    // // the write account program.
    // chunks.chunk_size = core::num::NonZeroU16::new(500).unwrap();
    // for instruction in &mut chunks {
    //     let transaction = Transaction::new_signed_with_payer(
    //         &[instruction],
    //         Some(&authority.pubkey()),
    //         &[&*authority],
    //         blockhash,
    //     );
    //     let sig = sol_rpc_client
    //         .send_and_confirm_transaction_with_spinner(&transaction)
    //         .unwrap();
    //     println!("  Signature {sig}");
    // }
    // let (write_account, write_account_bump) = chunks.into_account();

    // println!("\nUpdating Mock Client");
    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         2_000_000u32,
    //     ))
    //     .instruction(ComputeBudgetInstruction::request_heap_frame(128 * 1024))
    //     .accounts(
    //         accounts::Deliver {
    //             sender: authority.pubkey(),
    //             receiver: None,
    //             storage,
    //             trie,
    //             chain,
    //             system_program: system_program::ID,
    //             mint_authority: None,
    //             token_mint: None,
    //             escrow_account: None,
    //             receiver_token_account: None,
    //             associated_token_program: None,
    //             token_program: None,
    //         }, // chunk_account,
    //     )
    //     .accounts(vec![
    //         AccountMeta {
    //             pubkey: signatures_account_pda,
    //             is_signer: false,
    //             is_writable: true,
    //         },
    //         AccountMeta {
    //             pubkey: chunk_account,
    //             is_signer: false,
    //             is_writable: true,
    //         },
    //     ])
    //     .args(ix_data_account::Instruction)
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // /*
    //  * Create New Mock Connection Open Init
    //  */
    // println!("\nIssuing Connection Open Init");
    // let client_id = mock_client_state.client_type().build_client_id(0);
    // let counter_party_client_id =
    //     mock_client_state.client_type().build_client_id(1);

    // let commitment_prefix: ibc::CommitmentPrefix =
    //     IBC_TRIE_PREFIX.to_vec().try_into().unwrap();

    // let message = make_message!(
    //     ibc::MsgConnectionOpenInit {
    //         client_id_on_a: mock_client_state.client_type().build_client_id(0),
    //         version: Some(Default::default()),
    //         counterparty: ibc::conn::Counterparty::new(
    //             counter_party_client_id.clone(),
    //             None,
    //             commitment_prefix.clone(),
    //         ),
    //         delay_period: Duration::from_secs(5),
    //         signer: ibc::Signer::from(authority.pubkey().to_string()),
    //     },
    //     ibc::ConnectionMsg::OpenInit,
    //     ibc::MsgEnvelope::Connection,
    // );

    // let sig = program
    //     .request()
    //     .accounts(accounts::Deliver {
    //         sender: authority.pubkey(),
    //         receiver: None,
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //         mint_authority: None,
    //         token_mint: None,
    //         escrow_account: None,
    //         receiver_token_account: None,
    //         associated_token_program: None,
    //         token_program: None,
    //     })
    //     .args(instruction::Deliver { message })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let port_id = ibc::PortId::transfer();
    // let channel_id_on_a = ibc::ChannelId::new(0);
    // let channel_id_on_b = ibc::ChannelId::new(1);

    // let seeds =
    //     [port_id.as_bytes(), channel_id_on_a.as_bytes(), hashed_denom.as_ref()];
    // let (escrow_account_key, _bump) =
    //     Pubkey::find_program_address(&seeds, &crate::ID);
    // let (token_mint_key, _bump) =
    //     Pubkey::find_program_address(&[hashed_denom.as_ref()], &crate::ID);
    // let (mint_authority_key, _bump) =
    //     Pubkey::find_program_address(&[MINT_ESCROW_SEED], &crate::ID);

    // /*
    //  * Setup mock connection and channel
    //  *
    //  * Steps before we proceed
    //  *  - Create PDAs for the above keys,
    //  *  - Get token account for receiver and sender
    //  */
    // println!("\nSetting up mock connection and channel");
    // let receiver = Keypair::new();

    // let sender_token_address =
    //     get_associated_token_address(&authority.pubkey(), &token_mint_key);
    // let receiver_token_address =
    //     get_associated_token_address(&receiver.pubkey(), &token_mint_key);

    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::MockDeliver {
    //         sender: authority.pubkey(),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //     })
    //     .args(instruction::MockDeliver {
    //         port_id: port_id.clone(),
    //         commitment_prefix,
    //         client_id: client_id.clone(),
    //         counterparty_client_id: counter_party_client_id,
    //     })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // // Make sure all the accounts needed for transfer are ready ( mint, escrow etc.)
    // // Pass the instruction for transfer

    // /*
    //  * Setup deliver escrow.
    //  */
    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::InitMint {
    //         sender: authority.pubkey(),
    //         mint_authority: mint_authority_key,
    //         token_mint: token_mint_key,
    //         system_program: system_program::ID,
    //         associated_token_program: anchor_spl::associated_token::ID,
    //         token_program: anchor_spl::token::ID,
    //     })
    //     .args(instruction::InitMint {
    //         port_id: port_id.clone(),
    //         channel_id_on_b: channel_id_on_a.clone(),
    //         hashed_base_denom: hashed_denom.clone(),
    //     })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let mint_info = sol_rpc_client.get_token_supply(&token_mint_key).unwrap();

    // println!("  This is the mint information {:?}", mint_info);

    /*
     * Creating Token Mint
     */
    println!("\nCreating a token mint");

    let create_account_ix = create_account(
        &authority.pubkey(),
        &native_token_mint_key,
        sol_rpc_client.get_minimum_balance_for_rent_exemption(82).unwrap(),
        82,
        &anchor_spl::token::ID,
    );

    let create_mint_ix = initialize_mint2(
        &anchor_spl::token::ID,
        &native_token_mint_key,
        &authority.pubkey(),
        Some(&authority.pubkey()),
        6,
    )
    .expect("invalid mint instruction");

    let create_token_acc_ix = spl_associated_token_account::instruction::create_associated_token_account(&authority.pubkey(), &authority.pubkey(), &native_token_mint_key, &anchor_spl::token::ID);
    let associated_token_addr = get_associated_token_address(
        &authority.pubkey(),
        &native_token_mint_key,
    );
    let mint_ix = spl_token::instruction::mint_to(
        &anchor_spl::token::ID,
        &native_token_mint_key,
        &associated_token_addr,
        &authority.pubkey(),
        &[&authority.pubkey()],
        1000000000,
    )
    .unwrap();

    let tx = program
        .request()
        .instruction(create_account_ix)
        .instruction(create_mint_ix)
        .instruction(create_token_acc_ix)
        .instruction(mint_ix)
        .payer(authority.clone())
        .signer(&*authority)
        .signer(&mint_keypair)
        .send()?;
    // .send_with_spinner_and_config(RpcSendTransactionConfig {
    //     skip_preflight: true,
    //     ..RpcSendTransactionConfig::default()
    // })?;

    println!("  Signature: {}", tx);

    // /*
    //  * Sending transfer on source chain
    //  */
    // println!("\nSend Transfer On Source Chain");

    // let msg_transfer = construct_transfer_packet_from_denom(
    //     &base_denom,
    //     port_id.clone(),
    //     channel_id_on_b.clone(),
    //     channel_id_on_a.clone(),
    //     associated_token_addr,
    //     receiver_token_address,
    // );

    // let account_balance_before = sol_rpc_client
    //     .get_token_account_balance(&associated_token_addr)
    //     .unwrap();

    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::SendTransfer {
    //         sender: authority.pubkey(),
    //         receiver: Some(receiver.pubkey()),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //         mint_authority: Some(mint_authority_key),
    //         token_mint: Some(native_token_mint_key),
    //         escrow_account: Some(escrow_account_key),
    //         receiver_token_account: Some(associated_token_addr),
    //         associated_token_program: Some(anchor_spl::associated_token::ID),
    //         token_program: Some(anchor_spl::token::ID),
    //     })
    //     .args(instruction::SendTransfer {
    //         port_id: port_id.clone(),
    //         channel_id: channel_id_on_a.clone(),
    //         hashed_base_denom: hashed_denom.clone(),
    //         msg: msg_transfer,
    //     })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let account_balance_after = sol_rpc_client
    //     .get_token_account_balance(&associated_token_addr)
    //     .unwrap();

    // assert_eq!(
    //     ((account_balance_before.ui_amount.unwrap() -
    //         account_balance_after.ui_amount.unwrap()) *
    //         10_f64.powf(mint_info.decimals.into()))
    //     .round() as u64,
    //     TRANSFER_AMOUNT
    // );

    // /*
    //  * On Destination chain
    //  */
    // println!("\nRecving on destination chain");
    // let account_balance_before = sol_rpc_client
    //     .get_token_account_balance(&receiver_token_address)
    //     .map_or(0f64, |balance| balance.ui_amount.unwrap());

    // let packet = construct_packet_from_denom(
    //     &base_denom,
    //     port_id.clone(),
    //     channel_id_on_b.clone(),
    //     channel_id_on_a.clone(),
    //     channel_id_on_b.clone(),
    //     2,
    //     sender_token_address,
    //     receiver_token_address,
    //     String::from("Tx from destination chain"),
    // );
    // let proof_height_on_a = mock_client_state.header.height;

    // let message = make_message!(
    //     ibc::MsgRecvPacket {
    //         packet: packet.clone(),
    //         proof_commitment_on_a: ibc::CommitmentProofBytes::try_from(
    //             packet.data
    //         )
    //         .unwrap(),
    //         proof_height_on_a,
    //         signer: ibc::Signer::from(authority.pubkey().to_string())
    //     },
    //     ibc::PacketMsg::Recv,
    //     ibc::MsgEnvelope::Packet,
    // );

    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::Deliver {
    //         sender: authority.pubkey(),
    //         receiver: Some(receiver.pubkey()),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //         mint_authority: Some(mint_authority_key),
    //         token_mint: Some(token_mint_key),
    //         escrow_account: None,
    //         receiver_token_account: Some(receiver_token_address),
    //         associated_token_program: Some(anchor_spl::associated_token::ID),
    //         token_program: Some(anchor_spl::token::ID),
    //     })
    //     .args(instruction::Deliver { message })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let account_balance_after = sol_rpc_client
    //     .get_token_account_balance(&receiver_token_address)
    //     .unwrap();
    // assert_eq!(
    //     ((account_balance_after.ui_amount.unwrap() - account_balance_before) *
    //         10_f64.powf(mint_info.decimals.into()))
    //     .round() as u64,
    //     TRANSFER_AMOUNT
    // );

    // /*
    //  * Sending transfer on destination chain
    //  */
    // println!("\nSend Transfer On Destination Chain");

    // let msg_transfer = construct_transfer_packet_from_denom(
    //     &base_denom,
    //     port_id.clone(),
    //     channel_id_on_a.clone(),
    //     channel_id_on_a.clone(),
    //     associated_token_addr,
    //     receiver_token_address,
    // );

    // let account_balance_before = sol_rpc_client
    //     .get_token_account_balance(&associated_token_addr)
    //     .unwrap();

    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::SendTransfer {
    //         sender: authority.pubkey(),
    //         receiver: Some(receiver.pubkey()),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //         mint_authority: Some(mint_authority_key),
    //         token_mint: Some(native_token_mint_key),
    //         escrow_account: Some(escrow_account_key),
    //         receiver_token_account: Some(associated_token_addr),
    //         associated_token_program: Some(anchor_spl::associated_token::ID),
    //         token_program: Some(anchor_spl::token::ID),
    //     })
    //     .args(instruction::SendTransfer {
    //         port_id: port_id.clone(),
    //         channel_id: channel_id_on_a.clone(),
    //         hashed_base_denom: hashed_denom,
    //         msg: msg_transfer,
    //     })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let account_balance_after = sol_rpc_client
    //     .get_token_account_balance(&associated_token_addr)
    //     .unwrap();

    // assert_eq!(
    //     ((account_balance_before.ui_amount.unwrap() -
    //         account_balance_after.ui_amount.unwrap()) *
    //         10_f64.powf(mint_info.decimals.into()))
    //     .round() as u64,
    //     TRANSFER_AMOUNT
    // );

    // /*
    //  * On Source chain
    //  */
    // println!("\nRecving on source chain");

    // let receiver_native_token_address = get_associated_token_address(
    //     &receiver.pubkey(),
    //     &native_token_mint_key,
    // );

    // let packet = construct_packet_from_denom(
    //     &base_denom,
    //     port_id.clone(),
    //     channel_id_on_b.clone(),
    //     channel_id_on_b.clone(),
    //     channel_id_on_a.clone(),
    //     3,
    //     sender_token_address,
    //     receiver_native_token_address,
    //     String::from("Tx from Source chain"),
    // );

    // let proof_height_on_a = mock_client_state.header.height;

    // let message = make_message!(
    //     ibc::MsgRecvPacket {
    //         packet: packet.clone(),
    //         proof_commitment_on_a: ibc::CommitmentProofBytes::try_from(
    //             packet.data
    //         )
    //         .unwrap(),
    //         proof_height_on_a,
    //         signer: ibc::Signer::from(authority.pubkey().to_string())
    //     },
    //     ibc::PacketMsg::Recv,
    //     ibc::MsgEnvelope::Packet,
    // );

    // // println!("  This is trie {:?}", trie);
    // // println!("  This is storage {:?}", storage);

    // let escrow_account_balance_before =
    //     sol_rpc_client.get_token_account_balance(&escrow_account_key).unwrap();
    // let receiver_account_balance_before = sol_rpc_client
    //     .get_token_account_balance(&receiver_native_token_address)
    //     .map_or(0f64, |balance| balance.ui_amount.unwrap());

    // let sig = program
    //     .request()
    //     .instruction(ComputeBudgetInstruction::set_compute_unit_limit(
    //         1_000_000u32,
    //     ))
    //     .accounts(accounts::Deliver {
    //         sender: authority.pubkey(),
    //         receiver: Some(receiver.pubkey()),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //         mint_authority: Some(mint_authority_key),
    //         token_mint: Some(native_token_mint_key),
    //         escrow_account: Some(escrow_account_key),
    //         receiver_token_account: Some(receiver_native_token_address),
    //         associated_token_program: Some(anchor_spl::associated_token::ID),
    //         token_program: Some(anchor_spl::token::ID),
    //     })
    //     .args(instruction::Deliver { message })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // let escrow_account_balance_after =
    //     sol_rpc_client.get_token_account_balance(&escrow_account_key).unwrap();
    // let receiver_account_balance_after = sol_rpc_client
    //     .get_token_account_balance(&receiver_native_token_address)
    //     .unwrap();
    // assert_eq!(
    //     ((escrow_account_balance_before.ui_amount.unwrap() -
    //         escrow_account_balance_after.ui_amount.unwrap()) *
    //         10_f64.powf(mint_info.decimals.into()))
    //     .round() as u64,
    //     TRANSFER_AMOUNT
    // );
    // assert_eq!(
    //     ((receiver_account_balance_after.ui_amount.unwrap() -
    //         receiver_account_balance_before) *
    //         10_f64.powf(mint_info.decimals.into()))
    //     .round() as u64,
    //     TRANSFER_AMOUNT
    // );

    // /*
    //  * Send Packets
    //  */
    // println!("\nSend packet");
    // let packet = construct_packet_from_denom(
    //     &base_denom,
    //     port_id.clone(),
    //     channel_id_on_a.clone(),
    //     channel_id_on_a.clone(),
    //     channel_id_on_b.clone(),
    //     1,
    //     sender_token_address,
    //     receiver_token_address,
    //     String::from("Just a packet"),
    // );

    // let sig = program
    //     .request()
    //     .accounts(accounts::SendPacket {
    //         sender: authority.pubkey(),
    //         storage,
    //         trie,
    //         chain,
    //         system_program: system_program::ID,
    //     })
    //     .args(instruction::SendPacket {
    //         port_id: port_id.clone(),
    //         channel_id: channel_id_on_a.clone(),
    //         data: packet.data,
    //         timeout_height: packet.timeout_height_on_b,
    //         timeout_timestamp: packet.timeout_timestamp_on_b,
    //     })
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature: {sig}");

    // /*
    //  * Free Write account
    //  */
    // println!("\nFreeing Write account");
    // let sig = program
    //     .request()
    //     .instruction(write::instruction::free(
    //         write_account_program_id,
    //         authority.pubkey(),
    //         Some(write_account),
    //         WRITE_ACCOUNT_SEED,
    //         write_account_bump,
    //     )?)
    //     .payer(authority.clone())
    //     .signer(&*authority)
    //     .send_with_spinner_and_config(RpcSendTransactionConfig {
    //         skip_preflight: true,
    //         ..RpcSendTransactionConfig::default()
    //     })?;
    // println!("  Signature {sig}");

    Ok(())
}

fn construct_packet_from_denom(
    base_denom: &str,
    port_id: ibc::PortId,
    // Channel id used to define if its source chain or destination chain (in
    // denom).
    denom_channel_id: ibc::ChannelId,
    channel_id_on_a: ibc::ChannelId,
    channel_id_on_b: ibc::ChannelId,
    sequence: u64,
    sender_token_address: Pubkey,
    receiver_token_address: Pubkey,
    memo: String,
) -> ibc::Packet {
    let denom = format!("{port_id}/{denom_channel_id}/{base_denom}");
    let denom =
        ibc::apps::transfer::types::PrefixedDenom::from_str(&denom).unwrap();
    let token = ibc::apps::transfer::types::Coin {
        denom,
        amount: TRANSFER_AMOUNT.into(),
    };

    let packet_data = ibc::apps::transfer::types::packet::PacketData {
        token: token.into(),
        sender: ibc::Signer::from(sender_token_address.to_string()), // Should be a token account
        receiver: ibc::Signer::from(receiver_token_address.to_string()), // Should be a token account
        memo: memo.into(),
    };

    let serialized_data = serde_json::to_vec(&packet_data).unwrap();

    let packet = ibc::Packet {
        seq_on_a: sequence.into(),
        port_id_on_a: port_id.clone(),
        chan_id_on_a: channel_id_on_a,
        port_id_on_b: port_id,
        chan_id_on_b: channel_id_on_b,
        data: serialized_data.clone(),
        timeout_height_on_b: ibc::TimeoutHeight::Never,
        timeout_timestamp_on_b: ibc::Timestamp::none(),
    };

    packet
}

fn construct_transfer_packet_from_denom(
    base_denom: &str,
    port_id: ibc::PortId,
    // Channel id used to define if its source chain or destination chain (in
    // denom).
    denom_channel_id: ibc::ChannelId,
    channel_id_on_a: ibc::ChannelId,
    sender_address: Pubkey,
    receiver_address: Pubkey,
) -> MsgTransfer {
    let denom = format!("{port_id}/{denom_channel_id}/{base_denom}");
    let denom =
        ibc::apps::transfer::types::PrefixedDenom::from_str(&denom).unwrap();
    let token = ibc::apps::transfer::types::Coin {
        denom,
        amount: TRANSFER_AMOUNT.into(),
    };

    let packet_data = ibc::apps::transfer::types::packet::PacketData {
        token: token.into(),
        sender: ibc::Signer::from(sender_address.to_string()), // Should be a token account
        receiver: ibc::Signer::from(receiver_address.to_string()), // Should be a token account
        memo: String::from("Sending a transfer").into(),
    };

    MsgTransfer {
        port_id_on_a: port_id.clone(),
        chan_id_on_a: channel_id_on_a.clone(),
        packet_data,
        timeout_height_on_b: ibc::TimeoutHeight::Never,
        timeout_timestamp_on_b: ibc::Timestamp::none(),
    }
}

pub fn new_ed25519_instruction_with_signature(
    pubkeys: Vec<Vec<u8>>,
    signatures: Vec<Vec<u8>>,
    messages: Vec<Vec<u8>>,
) -> Instruction {
    use anchor_client::solana_sdk::ed25519_instruction::{
        DATA_START, PUBKEY_SERIALIZED_SIZE, SIGNATURE_SERIALIZED_SIZE,
    };
    use bytemuck::bytes_of;
    assert_eq!(signatures.len(), messages.len());
    let num_signatures: u8 = signatures.len().try_into().unwrap();
    let mut instruction_data = Vec::new();
    instruction_data.extend_from_slice(&[num_signatures, 0]);
    let mut offset = 0;
    for (index, _) in signatures.iter().enumerate() {
        let signature = &signatures[index];
        let message = &messages[index];
        let pubkey = &pubkeys[index];
        assert_eq!(pubkey.len(), PUBKEY_SERIALIZED_SIZE);
        assert_eq!(signature.len(), SIGNATURE_SERIALIZED_SIZE);

        let public_key_offset = if index > 0 {
            offset + DATA_START
        } else {
            offset + SIGNATURE_OFFSETS_SERIALIZED_SIZE
        };
        let signature_offset =
            public_key_offset.saturating_add(PUBKEY_SERIALIZED_SIZE);
        let message_data_offset =
            signature_offset.saturating_add(SIGNATURE_SERIALIZED_SIZE);

        let offsets = SignatureOffsets {
            signature_offset: signature_offset as u16,
            signature_instruction_index: u16::MAX,
            public_key_offset: public_key_offset as u16,
            public_key_instruction_index: u16::MAX,
            message_data_offset: message_data_offset as u16,
            message_data_size: message.len() as u16,
            message_instruction_index: u16::MAX,
        };
        let current_instruction =
            [bytes_of(&offsets), &pubkey, &signature, &message].concat();
        instruction_data.extend_from_slice(&current_instruction);
        offset += SIGNATURE_OFFSETS_SERIALIZED_SIZE
            .saturating_add(SIGNATURE_SERIALIZED_SIZE)
            .saturating_add(PUBKEY_SERIALIZED_SIZE)
            .saturating_add(message.len())
    }

    // let instruction =
    // 	[&[num_signatures, 0], bytes_of(&offsets), pubkey, signature, message].concat();
    let expected_data_size = num_signatures
        .saturating_mul(SIGNATURE_OFFSETS_SERIALIZED_SIZE as u8)
        .saturating_add(2);

    println!(
        "Expected {:?} current {:?}",
        expected_data_size,
        instruction_data.len()
    );

    Instruction {
        program_id: anchor_client::solana_sdk::ed25519_program::id(),
        accounts: vec![],
        data: instruction_data,
    }
}
